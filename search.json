[{"path":"https://statdivlab.github.io/radEmu/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 radEmu authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to radEmu","text":"lab ’ll explore dataset published Wirbel et al. (2019). meta-analysis case-control studies, meaning Wirbel et al. collected raw sequencing data studies researchers conducted re-analyzed (case, also collected new data ). Wirbel et al. published two pieces data ’ll focus today: metadata giving demographics information participants mOTU (metagenomic OTU) table manuscript, looked differential abundance across otherwise similar colorectal cancer non-cancer control study participants 849 mOTUs Wirbel et al. published. purpose streamlined tutorial, look subset 849 mOTUs vignette.","code":""},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu.html","id":"loading-and-exploring-data","dir":"Articles","previous_headings":"","what":"Loading and exploring data","title":"Introduction to radEmu","text":"’ll start looking metadata. can see dataset includes 566566 observations 1414 variables. Let’s see many observations among cases (“CRC”) controls (“CTR”) data studies 5 different countries. much study, ask? Let’s find ! Let’s see many cases controls enrolled study well. Now let’s load mOTU table. can see table 566566 samples (just like metadata) 845845 mOTUs. Let’s save mOTU names vector.","code":"data(\"wirbel_sample\") dim(wirbel_sample) #> [1] 566  14 head(wirbel_sample) #>                             Sample_ID External_ID Age Gender BMI Country  Study #> CCIS00146684ST.4.0 CCIS00146684ST-4-0      FR-726  72      F  25     FRA FR-CRC #> CCIS00281083ST.3.0 CCIS00281083ST-3-0      FR-060  53      M  32     FRA FR-CRC #> CCIS02124300ST.4.0 CCIS02124300ST-4-0      FR-568  35      M  23     FRA FR-CRC #> CCIS02379307ST.4.0 CCIS02379307ST-4-0      FR-828  67      M  28     FRA FR-CRC #> CCIS02856720ST.4.0 CCIS02856720ST-4-0      FR-027  74      M  27     FRA FR-CRC #> CCIS03473770ST.4.0 CCIS03473770ST-4-0      FR-192  29      M  24     FRA FR-CRC #>                    Group Library_Size Age_spline.1 Age_spline.2 BMI_spline.1 #> CCIS00146684ST.4.0   CTR     35443944  -0.19755428    0.7389621   1.18982420 #> CCIS00281083ST.3.0   CTR     19307896  -0.08126128   -0.6818534  -1.40679307 #> CCIS02124300ST.4.0   CTR     42141246  -2.17453529   -0.6818534   0.45476676 #> CCIS02379307ST.4.0   CRC      4829533   0.67464323   -0.1490476   0.07698823 #> CCIS02856720ST.4.0   CTR     34294675  -0.54643328    1.0941660   0.44793355 #> CCIS03473770ST.4.0   CTR     20262319  -2.87229329   -0.6818534   0.95261443 #>                    BMI_spline.2 Sampling #> CCIS00146684ST.4.0   -0.5606919   BEFORE #> CCIS00281083ST.3.0    2.0039136   BEFORE #> CCIS02124300ST.4.0   -0.6706035   BEFORE #> CCIS02379307ST.4.0    0.5384247   BEFORE #> CCIS02856720ST.4.0    0.1720525   BEFORE #> CCIS03473770ST.4.0   -0.6706035   BEFORE wirbel_sample %>%   group_by(Group) %>%   summarize(count = n()) #> # A tibble: 2 × 2 #>   Group count #>   <chr> <int> #> 1 CRC     278 #> 2 CTR     288 wirbel_sample %>%   group_by(Country) %>%   summarize(count = n()) #> # A tibble: 5 × 2 #>   Country count #>   <chr>   <int> #> 1 AUS       109 #> 2 CHI       126 #> 3 FRA       110 #> 4 GER       120 #> 5 USA       101 wirbel_sample %>%   group_by(Country, Group) %>%   summarize(n = n()) #> `summarise()` has grouped output by 'Country'. You can override using the #> `.groups` argument. #> # A tibble: 10 × 3 #> # Groups:   Country [5] #>    Country Group     n #>    <chr>   <chr> <int> #>  1 AUS     CRC      46 #>  2 AUS     CTR      63 #>  3 CHI     CRC      72 #>  4 CHI     CTR      54 #>  5 FRA     CRC      51 #>  6 FRA     CTR      59 #>  7 GER     CRC      60 #>  8 GER     CTR      60 #>  9 USA     CRC      49 #> 10 USA     CTR      52 data(\"wirbel_otu\") dim(wirbel_otu) #> [1] 566 845 # let's check out a subset wirbel_otu[1:5, 1:3] #>                    Streptococcus anginosus [ref_mOTU_v2_0004] #> CCIS00146684ST.4.0                                          0 #> CCIS00281083ST.3.0                                          0 #> CCIS02124300ST.4.0                                          2 #> CCIS02379307ST.4.0                                          0 #> CCIS02856720ST.4.0                                          1 #>                    Enterobacteriaceae sp. [ref_mOTU_v2_0036] #> CCIS00146684ST.4.0                                         3 #> CCIS00281083ST.3.0                                         0 #> CCIS02124300ST.4.0                                         5 #> CCIS02379307ST.4.0                                         5 #> CCIS02856720ST.4.0                                       675 #>                    Citrobacter sp. [ref_mOTU_v2_0076] #> CCIS00146684ST.4.0                                  0 #> CCIS00281083ST.3.0                                  0 #> CCIS02124300ST.4.0                                  0 #> CCIS02379307ST.4.0                                  0 #> CCIS02856720ST.4.0                                  0 mOTU_names <- colnames(wirbel_otu)"},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu.html","id":"fitting-a-model","dir":"Articles","previous_headings":"","what":"Fitting a model","title":"Introduction to radEmu","text":"radEmu package can used estimate fold-differences abundance microbial taxa levels covariate. analysis, covariate primarily interested whether sample case colorectal cancer control. make control (“CTR”) reference category: general fit model mOTUs, going subset specific genera purposes tutorial. Let’s look Eubacterium, Porphyromonas, Faecalibacteria, Fusobacterium now. , generally fit model using samples, tutorial going consider data case-control study China. Next, want confirm samples least one non-zero count across categories ’ve chosen categories least one non-zero count across samples ’ve chosen. function use fit model called emuFit. can accept data various forms, show use data frames input. Check phyloseq vignette ’d like know radEmu plays phyloseq objects! One version inputs emuFit formula: formula telling radEmu predictors use model. using Group, indicator case (CRC) vs control (CTR). data: dataframe containing information predictors. Recall ’re looking observations Chinese study. Y: matrix dataframe containing observed abundance data (e.g., counts depth measurements). rows give observations (samples), columns give categories (taxa/mOTUs). considering observations Chinese study Eubacterium, Porphyromonas, Faecalibacteria, Fusobacterium genera. Note Y doesn’t integer-valued (counts)! optional arguments include run_score_tests: logical value denoting whether run score tests. Score tests awesome error rate control (including small sample sizes; though course larger sample sizes always give better power), require refitting model, can require compute time. Let’s check object looks like! way access estimated coefficients confidence intervals model ch_fit$coef. Let’s plot results:  Interestingly, estimate meta-mOTU “unknown Eubacterium [meta_mOTU_v2_7116]” assigned Eubacteria much higher ratio abundance (comparing CRC group control) typical across mOTUs included analysis. confidence interval effect include zero – (!!!) kind confidence interval returned default emuFit extremely reliable counts skewed sample size small--moderate. investigate , let’s run robust score test, reliable settings (also takes time apparently can’t nice things). comparison, ’ll also test mOTU “Fusobacterium nucleatum s. nucleatum [ref_mOTU_v2_0777]”, also estimate much larger ratio concentrations across groups typical among taxa included model fit. set test, can run emuFit, giving fitted values ’s already found: formula, data Y B previous fitted object (output emuFit) test_kj dataframe listing indices parameters (ch_fit$B) want test. show identify , j = 3 F. nucleatum j = 36 Eubacterium meta mOTU. Let’s take look test output. Fusobacterium nucleatum mOTU robust score test p-value 0.07, unknown Eubacterium mOTU robust score test p-value 0.3. make sense? Let’s investigate looking Eubacterium mOTU counts Group. detect meta-mOTU single sample Chinese study cohort! , yes – makes sense test returns relatively large p-value. Good job, emuFit! Now let’s look F. nucleatum. also makes sense given found – F. nucleatum shows sizeable minority CRC cases, whereas Wirbel et al detect one control participant. run robust score tests every taxon analysis, take longer amount time run. code run vignette, feel free run .","code":"wirbel_sample$Group <- factor(wirbel_sample$Group, levels = c(\"CTR\",\"CRC\")) chosen_genera <- c(\"Eubacterium\", \"Faecalibacterium\", \"Fusobacterium\", \"Porphyromonas\") mOTU_name_df <- data.frame(name = mOTU_names) %>%    mutate(base_name = stringr::str_remove(mOTU_names, \"unknown \") %>%                       stringr::str_remove(\"uncultured \")) %>%   mutate(genus_name = stringr::word(base_name, 1)) restricted_mOTU_names <- mOTU_name_df %>%   filter(genus_name %in% chosen_genera) %>%   pull(name) ch_study_obs <- which(wirbel_sample$Country %in% c(\"CHI\")) small_Y <- wirbel_otu[ch_study_obs, restricted_mOTU_names] sum(rowSums(small_Y) == 0) # no samples have a count sum of 0  #> [1] 0 sum(colSums(small_Y) == 0) # one category has a count sum of 0 #> [1] 1  category_to_rm <- which(colSums(small_Y) == 0) small_Y <- small_Y[, -category_to_rm] sum(colSums(small_Y) == 0) #> [1] 0 ch_fit <- emuFit(formula = ~ Group,                   data = wirbel_sample[ch_study_obs, ],                  Y = small_Y,                  run_score_tests = FALSE) ch_fit #>  #> Call: #> emuFit(Y = small_Y, formula = ~Group, data = wirbel_sample[ch_study_obs,  #>     ], run_score_tests = FALSE) #>  #>  #> Coefficient estimates with the largest magnitudes: #>    covariate                                                category #> 24  GroupCRC               unknown Porphyromonas [meta_mOTU_v2_5431] #> 8   GroupCRC     Fusobacterium sp. oral taxon 370 [ref_mOTU_v2_1403] #> 19  GroupCRC                 Fusobacterium varium [ref_mOTU_v2_4311] #> 12  GroupCRC                Porphyromonas somerae [ref_mOTU_v2_2101] #> 9   GroupCRC         Fusobacterium gonidiaformans [ref_mOTU_v2_1404] #> 13  GroupCRC                Porphyromonas uenonis [ref_mOTU_v2_2102] #> 3   GroupCRC Fusobacterium nucleatum s. nucleatum [ref_mOTU_v2_0777] #> 31  GroupCRC               unknown Porphyromonas [meta_mOTU_v2_6490] #> 43  GroupCRC               unknown Porphyromonas [meta_mOTU_v2_7656] #> 2   GroupCRC  Fusobacterium nucleatum s. animalis [ref_mOTU_v2_0776] #> 28  GroupCRC            unknown Faecalibacterium [meta_mOTU_v2_5815] #> 27  GroupCRC            unknown Faecalibacterium [meta_mOTU_v2_5779] #> 46  GroupCRC            unknown Faecalibacterium [meta_mOTU_v2_7718] #> 36  GroupCRC                 unknown Eubacterium [meta_mOTU_v2_7116] #> 1   GroupCRC Fusobacterium nucleatum s. vincentii [ref_mOTU_v2_0754] #> 25  GroupCRC                 unknown Eubacterium [meta_mOTU_v2_5463] #> 6   GroupCRC                      Eubacterium sp. [ref_mOTU_v2_1395] #> 21  GroupCRC                Porphyromonas uenonis [ref_mOTU_v2_4616] #> 35  GroupCRC             Eubacterium sp. CAG:581 [meta_mOTU_v2_7088] #> 15  GroupCRC               Eubacterium ventriosum [ref_mOTU_v2_4204] #>    category_num   estimate        se       lower       upper #> 24           24  6.2298842 0.9897422  4.29002513  8.16974334 #> 8             8  5.2672094 0.8352966  3.63005810  6.90436078 #> 19           19  4.5652884 0.9715710  2.66104434  6.46953251 #> 12           12  4.3176615 0.8684443  2.61554195  6.01978102 #> 9             9  3.5175422 0.8031114  1.94347270  5.09161167 #> 13           13  3.4508508 0.7990849  1.88467325  5.01702837 #> 3             3  3.0864047 1.0275200  1.07250258  5.10030686 #> 31           31  3.0279940 0.6352830  1.78286206  4.27312586 #> 43           43  2.7082236 0.9141294  0.91656281  4.49988433 #> 2             2  2.3131711 0.8271200  0.69204555  3.93429655 #> 28           28 -2.1162206 0.6522746 -3.39465529 -0.83778595 #> 27           27 -2.0205792 0.5739337 -3.14546852 -0.89568983 #> 46           46 -1.8206825 0.6495700 -3.09381631 -0.54754864 #> 36           36  1.6929929 0.8145725  0.09646008  3.28952571 #> 1             1  1.4863786 0.8966329 -0.27098957  3.24374686 #> 25           25 -1.2363777 0.6871789 -2.58322363  0.11046822 #> 6             6  1.1295235 0.9563470 -0.74488212  3.00392919 #> 21           21  0.9864227 0.8705006 -0.71972707  2.69257246 #> 35           35 -0.9817335 1.0406234 -3.02131787  1.05785084 #> 15           15 -0.8986574 0.4381476 -1.75741093 -0.03990382 #> To obtain the entire coefficient table, use the command `emuFit_object$coef`. ch_df <- ch_fit$coef %>%   mutate(Genus = (mOTU_name_df %>%             filter(genus_name %in% chosen_genera) %>%             pull(genus_name))[-category_to_rm]) %>%   # add genus name to output from emuFit   mutate(cat_small = stringr::str_remove(paste0(\"mOTU_\",                              stringr::str_split(category, 'mOTU_v2_', simplify = TRUE)[, 2]),                              \"\\\\]\")) %>%   mutate(cat_small = factor(cat_small, levels = cat_small[order(Genus)]))   # reorder mOTU categories by genus  ggplot(ch_df) +    geom_point(aes(x = cat_small, y = estimate,color = Genus), size = .5) +   geom_errorbar(aes(x = cat_small, ymin = lower, ymax = upper, color = Genus), width = .25) +   theme_bw() +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   labs(x = \"Category\",        y = \"Estimate\") +    coord_cartesian(ylim = c(-5,10)) taxa_to_test <- c(which(str_detect(restricted_mOTU_names, \"0777\")),                    which(str_detect(restricted_mOTU_names, \"7116\"))) ch_fit$B %>% rownames #> [1] \"(Intercept)\" \"GroupCRC\" covariate_to_test <- 2 #which(\"GroupCRC\" == ch_fit$B %>% rownames) # TODO(AW) two_robust_score_tests <- emuFit(formula = ~ Group,                                  data = wirbel_sample[ch_study_obs, ],                                  B = ch_fit,                                  test_kj = data.frame(k = covariate_to_test,                                                        j = taxa_to_test),                                   Y = small_Y) two_robust_score_tests$coef[taxa_to_test, c(\"covariate\", \"category\", \"estimate\", \"pval\")] #>    covariate                                                category estimate #> 3   GroupCRC Fusobacterium nucleatum s. nucleatum [ref_mOTU_v2_0777] 3.086405 #> 36  GroupCRC                 unknown Eubacterium [meta_mOTU_v2_7116] 1.692993 #>          pval #> 3  0.07423418 #> 36 0.30168301 data.frame(counts = wirbel_otu[ch_study_obs, \"unknown Eubacterium [meta_mOTU_v2_7116]\"],            group = wirbel_sample$Group[ch_study_obs]) %>%   mutate(eubact_present = counts > 0) %>%   group_by(group, eubact_present) %>%   count() #> # A tibble: 3 × 3 #> # Groups:   group, eubact_present [3] #>   group eubact_present     n #>   <fct> <lgl>          <int> #> 1 CTR   FALSE             54 #> 2 CRC   FALSE             71 #> 3 CRC   TRUE               1 data.frame(counts = wirbel_otu[ch_study_obs,                                 \"Fusobacterium nucleatum s. nucleatum [ref_mOTU_v2_0777]\"],            group = wirbel_sample$Group[ch_study_obs]) %>%   mutate(fuso_present = counts > 0) %>%   group_by(group, fuso_present) %>%   count() #> # A tibble: 4 × 3 #> # Groups:   group, fuso_present [4] #>   group fuso_present     n #>   <fct> <lgl>        <int> #> 1 CTR   FALSE           53 #> 2 CTR   TRUE             1 #> 3 CRC   FALSE           59 #> 4 CRC   TRUE            13 test_all <- emuFit(formula = ~ Group,                     data = wirbel_sample[ch_study_obs, ],                    B = ch_fit,                    Y = small_Y,                    run_score_tests = TRUE)"},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu.html","id":"a-more-reasonable-model","dir":"Articles","previous_headings":"","what":"A more reasonable model","title":"Introduction to radEmu","text":"analysis, provided basic illustration method looking small number taxa, subset samples (one study five). However, ’re truly interested identifying taxa unusually abundant either CRC cases controls, make sense compare across study populations similar sex, age, BMI, country whether samples provided undergoing colonoscopy . ’s manuscript! Code fit model . Note wanted allow non-linear trends age BMI, using B-splines. ’re interested something similar, adapt code .","code":"all_fit <- emuFit(formula = ~ Group + Study + Gender +                     Age_spline.1 + Age_spline.2 +                      BMI_spline.1 + BMI_spline.2 + Sampling,                   data = wirbel_sample,                    Y = wirbel_otu[, restricted_mOTU_names],                   run_score_tests = FALSE) age_spline <- splines2::bSpline(wirbel_sample$Age, degree = 1, knots = median(wirbel_sample$Age)) age_spline[,1] <- (age_spline[,1] - mean(age_spline[,1]))/sd(age_spline[,1]) age_spline[,2] <- (age_spline[,2] - mean(age_spline[,2]))/sd(age_spline[,2])  bmi_spline <- splines2::bSpline(wirbel_sample$BMI, degree = 1, knots = median(wirbel_sample$BMI)) bmi_spline[,1] <- (bmi_spline[,1] - mean(bmi_spline[,1]))/sd(bmi_spline[,1]) bmi_spline[,2] <- (bmi_spline[,2] - mean(bmi_spline[,2]))/sd(bmi_spline[,2])"},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu_with_phyloseq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to radEmu with phyloseq","text":"vignette provides introduction using radEmu differential abundance analysis using phyloseq data object. -depth explanations software works details analysis, see vignette “intro_radEmu.Rmd”. lab ’ll explore dataset published Wirbel et al. (2019). meta-analysis case-control studies, meaning Wirbel et al. collected raw sequencing data studies researchers conducted re-analyzed (case, also collected new data ). Wirbel et al. published two pieces data ’ll focus today: metadata giving demographics information participants mOTU (metagenomic OTU) table manuscript, looked differential abundance across otherwise similar colorectal cancer non-cancer control study participants 849 mOTUs Wirbel et al. published. purpose streamlined tutorial, look subset 849 mOTUs vignette.","code":""},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu_with_phyloseq.html","id":"loading-and-exploring-data","dir":"Articles","previous_headings":"","what":"Loading and exploring data","title":"Introduction to radEmu with phyloseq","text":"Note order follow along tutorial (use radEmu!) need phyloseq installed. check phyloseq installed, can read following code run. Now loaded phyloseq package, create phyloseq data object. ’ll start looking metadata. can see dataset includes 566566 observations 1414 variables. Now let’s load mOTU table. can see table 566566 samples (just like metadata) 845845 mOTUs. Let’s save mOTU names vector. Finally, can check taxonomy table.","code":"phy <- requireNamespace(\"phyloseq\", quietly = TRUE) == TRUE #> [1] \"phyloseq is installed: TRUE\" data(wirbel_sample) data(wirbel_otu) data(wirbel_taxonomy) wirbel_phylo <- phyloseq::phyloseq(phyloseq::sample_data(wirbel_sample),                                    phyloseq::otu_table(wirbel_otu, taxa_are_rows = FALSE),                                    phyloseq::tax_table(wirbel_taxonomy)) wirbel_phylo #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 845 taxa and 566 samples ] #> sample_data() Sample Data:       [ 566 samples by 14 sample variables ] #> tax_table()   Taxonomy Table:    [ 845 taxa by 7 taxonomic ranks ] dim(phyloseq::sample_data(wirbel_phylo)) #> [1] 566  14 head(phyloseq::sample_data(wirbel_phylo)) #>                             Sample_ID External_ID Age Gender BMI Country  Study #> CCIS00146684ST.4.0 CCIS00146684ST-4-0      FR-726  72      F  25     FRA FR-CRC #> CCIS00281083ST.3.0 CCIS00281083ST-3-0      FR-060  53      M  32     FRA FR-CRC #> CCIS02124300ST.4.0 CCIS02124300ST-4-0      FR-568  35      M  23     FRA FR-CRC #> CCIS02379307ST.4.0 CCIS02379307ST-4-0      FR-828  67      M  28     FRA FR-CRC #> CCIS02856720ST.4.0 CCIS02856720ST-4-0      FR-027  74      M  27     FRA FR-CRC #> CCIS03473770ST.4.0 CCIS03473770ST-4-0      FR-192  29      M  24     FRA FR-CRC #>                    Group Library_Size Age_spline.1 Age_spline.2 BMI_spline.1 #> CCIS00146684ST.4.0   CTR     35443944  -0.19755428    0.7389621   1.18982420 #> CCIS00281083ST.3.0   CTR     19307896  -0.08126128   -0.6818534  -1.40679307 #> CCIS02124300ST.4.0   CTR     42141246  -2.17453529   -0.6818534   0.45476676 #> CCIS02379307ST.4.0   CRC      4829533   0.67464323   -0.1490476   0.07698823 #> CCIS02856720ST.4.0   CTR     34294675  -0.54643328    1.0941660   0.44793355 #> CCIS03473770ST.4.0   CTR     20262319  -2.87229329   -0.6818534   0.95261443 #>                    BMI_spline.2 Sampling #> CCIS00146684ST.4.0   -0.5606919   BEFORE #> CCIS00281083ST.3.0    2.0039136   BEFORE #> CCIS02124300ST.4.0   -0.6706035   BEFORE #> CCIS02379307ST.4.0    0.5384247   BEFORE #> CCIS02856720ST.4.0    0.1720525   BEFORE #> CCIS03473770ST.4.0   -0.6706035   BEFORE dim(phyloseq::otu_table(wirbel_phylo)) #> [1] 566 845 # let's check out a subset phyloseq::otu_table(wirbel_phylo)[1:5, 1:3] #> OTU Table:          [3 taxa and 5 samples] #>                      taxa are columns #>                    Streptococcus anginosus [ref_mOTU_v2_0004] #> CCIS00146684ST.4.0                                          0 #> CCIS00281083ST.3.0                                          0 #> CCIS02124300ST.4.0                                          2 #> CCIS02379307ST.4.0                                          0 #> CCIS02856720ST.4.0                                          1 #>                    Enterobacteriaceae sp. [ref_mOTU_v2_0036] #> CCIS00146684ST.4.0                                         3 #> CCIS00281083ST.3.0                                         0 #> CCIS02124300ST.4.0                                         5 #> CCIS02379307ST.4.0                                         5 #> CCIS02856720ST.4.0                                       675 #>                    Citrobacter sp. [ref_mOTU_v2_0076] #> CCIS00146684ST.4.0                                  0 #> CCIS00281083ST.3.0                                  0 #> CCIS02124300ST.4.0                                  0 #> CCIS02379307ST.4.0                                  0 #> CCIS02856720ST.4.0                                  0 mOTU_names <- colnames(phyloseq::otu_table(wirbel_phylo)) head(phyloseq::tax_table(wirbel_phylo)) #> Taxonomy Table:     [6 taxa by 7 taxonomic ranks]: #>                                                     domain     phylum           #> Streptococcus anginosus [ref_mOTU_v2_0004]          \"Bacteria\" \"Bacillota\"      #> Enterobacteriaceae sp. [ref_mOTU_v2_0036]           \"Bacteria\" \"Pseudomonadota\" #> Citrobacter sp. [ref_mOTU_v2_0076]                  \"Bacteria\" \"Pseudomonadota\" #> Klebsiella michiganensis/oxytoca [ref_mOTU_v2_0079] \"Bacteria\" \"Pseudomonadota\" #> Enterococcus faecalis [ref_mOTU_v2_0116]            \"Bacteria\" \"Bacillota\"      #> Lactobacillus salivarius [ref_mOTU_v2_0125]         \"Bacteria\" \"Bacillota\"      #>                                                     class                 #> Streptococcus anginosus [ref_mOTU_v2_0004]          \"Bacilli\"             #> Enterobacteriaceae sp. [ref_mOTU_v2_0036]           \"Gammaproteobacteria\" #> Citrobacter sp. [ref_mOTU_v2_0076]                  \"Gammaproteobacteria\" #> Klebsiella michiganensis/oxytoca [ref_mOTU_v2_0079] \"Gammaproteobacteria\" #> Enterococcus faecalis [ref_mOTU_v2_0116]            \"Bacilli\"             #> Lactobacillus salivarius [ref_mOTU_v2_0125]         \"Bacilli\"             #>                                                     order              #> Streptococcus anginosus [ref_mOTU_v2_0004]          \"Lactobacillales\"  #> Enterobacteriaceae sp. [ref_mOTU_v2_0036]           \"Enterobacterales\" #> Citrobacter sp. [ref_mOTU_v2_0076]                  \"Enterobacterales\" #> Klebsiella michiganensis/oxytoca [ref_mOTU_v2_0079] \"Enterobacterales\" #> Enterococcus faecalis [ref_mOTU_v2_0116]            \"Lactobacillales\"  #> Lactobacillus salivarius [ref_mOTU_v2_0125]         \"Lactobacillales\"  #>                                                     family               #> Streptococcus anginosus [ref_mOTU_v2_0004]          \"Streptococcaceae\"   #> Enterobacteriaceae sp. [ref_mOTU_v2_0036]           \"Enterobacteriaceae\" #> Citrobacter sp. [ref_mOTU_v2_0076]                  \"Enterobacteriaceae\" #> Klebsiella michiganensis/oxytoca [ref_mOTU_v2_0079] \"Enterobacteriaceae\" #> Enterococcus faecalis [ref_mOTU_v2_0116]            \"Enterococcaceae\"    #> Lactobacillus salivarius [ref_mOTU_v2_0125]         \"Lactobacillaceae\"   #>                                                     genus                #> Streptococcus anginosus [ref_mOTU_v2_0004]          \"Streptococcus\"      #> Enterobacteriaceae sp. [ref_mOTU_v2_0036]           \"Enterobacteriaceae\" #> Citrobacter sp. [ref_mOTU_v2_0076]                  \"Citrobacter\"        #> Klebsiella michiganensis/oxytoca [ref_mOTU_v2_0079] \"Klebsiella\"         #> Enterococcus faecalis [ref_mOTU_v2_0116]            \"Enterococcus\"       #> Lactobacillus salivarius [ref_mOTU_v2_0125]         \"Lactobacillus\"      #>                                                     species                        #> Streptococcus anginosus [ref_mOTU_v2_0004]          \"Streptococcus anginosus\"      #> Enterobacteriaceae sp. [ref_mOTU_v2_0036]           \"Enterobacteriaceae bacterium\" #> Citrobacter sp. [ref_mOTU_v2_0076]                  \"Citrobacter sp.\"              #> Klebsiella michiganensis/oxytoca [ref_mOTU_v2_0079] \"Klebsiella michiganensis\"     #> Enterococcus faecalis [ref_mOTU_v2_0116]            \"Enterococcus faecalis\"        #> Lactobacillus salivarius [ref_mOTU_v2_0125]         \"Ligilactobacillus salivarius\""},{"path":"https://statdivlab.github.io/radEmu/articles/intro_radEmu_with_phyloseq.html","id":"fitting-a-model","dir":"Articles","previous_headings":"","what":"Fitting a model","title":"Introduction to radEmu with phyloseq","text":"radEmu package can used estimate fold-differences abundance microbial taxa levels covariate. analysis, covariate primarily interested whether sample case colorectal cancer control. make control (“CTR”) reference category: general fit model mOTUs, going subset specific genera purposes tutorial. Let’s look Eubacterium, Porphyromonas, Faecalibacteria, Fusobacterium now. , generally fit model using samples, tutorial going consider data case-control study China. Next, want confirm samples least one non-zero count across categories ’ve chosen categories least one non-zero count across samples ’ve chosen. function use fit model called emuFit. can accept data various forms, show use phyloseq object input. way access estimated coefficients confidence intervals model ch_fit$coef. Let’s plot results:  ’d like see explanations radEmu software additional analyses data, check vignette “intro_radEmu.Rmd”.","code":"phyloseq::sample_data(wirbel_phylo)$Group <- factor(phyloseq::sample_data(wirbel_phylo)$Group, levels = c(\"CTR\",\"CRC\")) chosen_genera <- c(\"Eubacterium\", \"Faecalibacterium\", \"Fusobacterium\", \"Porphyromonas\") wirbel_restrict <- phyloseq::subset_taxa(wirbel_phylo, genus %in% chosen_genera) wirbel_china <- phyloseq::subset_samples(wirbel_restrict, Country == \"CHI\") sum(rowSums(phyloseq::otu_table(wirbel_china)) == 0) # no samples have a count sum of 0  #> [1] 0 sum(colSums(phyloseq::otu_table(wirbel_china)) == 0) # one category has a count sum of 0  #> [1] 1 category_to_rm <- names(which(colSums(phyloseq::otu_table(wirbel_china)) == 0)) wirbel_china <- phyloseq::subset_taxa(wirbel_china, species != category_to_rm) sum(colSums(phyloseq::otu_table(wirbel_china)) == 0) # now no categories have a count sum of 0  #> [1] 0 ch_fit <- emuFit(formula = ~ Group,                   Y = wirbel_china,                   run_score_tests = FALSE) ch_df <- ch_fit$coef %>%   mutate(Genus = as.vector(phyloseq::tax_table(wirbel_china)[, 6])) %>%   # add genus name to output from emuFit   mutate(cat_small = stringr::str_remove(paste0(\"mOTU_\",                              stringr::str_split(category, 'mOTU_v2_', simplify = TRUE)[, 2]),                              \"\\\\]\")) %>%   mutate(cat_small = factor(cat_small, levels = cat_small[order(Genus)]))   # reorder mOTU categories by genus  ggplot(ch_df) +    geom_point(aes(x = cat_small, y = estimate, color = Genus), size = .5) +   geom_errorbar(aes(x = cat_small, ymin = lower, ymax = upper, color = Genus), width = .25) +   theme_bw() +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   labs(x = \"Category\",        y = \"Estimate\") +    coord_cartesian(ylim = c(-5,10))"},{"path":"https://statdivlab.github.io/radEmu/articles/parallel_radEmu.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Parallelizing computation for score tests with radEmu","text":"vignette introduce parallel computing order efficient computation score tests. recommendation testing statistical hypotheses small moderate sample sizes radEmu run robust score test. test performs well (like controls Type error rate even small samples!), takes time run, need fit model null hypothesis. differential abundance analysis, often want run hypothesis test category (taxon, gene, etc) care , adds quickly. order improve computational efficiency, can run score tests parallel using parallel R package. let us take advantage additional cores personal computers computing clusters. Note using mclapply function parallel package, works Mac Linux machines, Windows. using Windows machine like vignette parallel computing Windows, please let us know opening issue. recommend working vignette, start introduction radEmu “intro_radEmu.Rmd.”","code":""},{"path":"https://statdivlab.github.io/radEmu/articles/parallel_radEmu.html","id":"setting-up-our-rademu-model-and-running-a-single-score-test","dir":"Articles","previous_headings":"","what":"Setting up our radEmu model and running a single score test","title":"Parallelizing computation for score tests with radEmu","text":"’ll use Wirbel et al. data introduction vignette. Recall dataset published Wirbel et al. (2019) meta-analysis case-controls comparing participants without colorectal cancer. Now ’ve processed data, can fit radEmu model. just want get estimates parameters standard errors, avoid running score tests setting run_score_tests = FALSE. introduction vignette found meta-mOTU “unknown Eubacterium [meta_mOTU_v2_7116]” assigned Eubacteria much higher ratio abundance (comparing CRC group control) typical across mOTUs included analysis, based parameter estimates ch_fit. can run robust score test test whether differential abundance mOTU cases controls significantly different differential abundance typical mOTU analysis. order run single robust score test, set run_score_tests = TRUE include argument test_kj. Instead re-estimating parameters model, provide ch_fit argument fitted_model set refit = FALSE. Now, can see took little run robust score test. investigate coefficient table robust_score output, can see p-value R robust_score$coef$pval[mOTU_to_test] test.","code":"# load in sample data data(\"wirbel_sample\") # set group to be a factor with levels CTR for control and CRC for cancer wirbel_sample$Group <- factor(wirbel_sample$Group, levels = c(\"CTR\",\"CRC\")) # load in abundance data  data(\"wirbel_otu\") # save mOTU names mOTU_names <- colnames(wirbel_otu) # consider taxa in the following genera chosen_genera <- c(\"Eubacterium\", \"Faecalibacterium\", \"Fusobacterium\", \"Porphyromonas\") # get taxonomy information from mOTU names mOTU_name_df <- data.frame(name = mOTU_names) %>%    mutate(base_name = stringr::str_remove(mOTU_names, \"unknown \") %>%                       stringr::str_remove(\"uncultured \")) %>%   mutate(genus_name = stringr::word(base_name, 1)) # restrict to names in chosen genera restricted_mOTU_names <- mOTU_name_df %>%   filter(genus_name %in% chosen_genera) %>%   pull(name) # pull out observations from a chinese study within the meta-analysis ch_study_obs <- which(wirbel_sample$Country %in% c(\"CHI\")) # make count matrix for chosen samples and genera small_Y <- wirbel_otu[ch_study_obs, restricted_mOTU_names] # check for samples with only zero counts sum(rowSums(small_Y) == 0) # no samples have a count sum of 0  #> [1] 0 # check for genera with only zero counts sum(colSums(small_Y) == 0) # one category has a count sum of 0 #> [1] 1 # remove the one genus with only zero counts category_to_rm <- which(colSums(small_Y) == 0) small_Y <- small_Y[, -category_to_rm] ch_fit <- emuFit(formula = ~ Group,                   data = wirbel_sample[ch_study_obs, ],                  Y = small_Y,                  run_score_tests = FALSE) mOTU_to_test <- which(str_detect(restricted_mOTU_names, \"7116\")) ch_fit$B %>% rownames #> [1] \"(Intercept)\" \"GroupCRC\" covariate_to_test <- which(\"GroupCRC\" == ch_fit$B %>% rownames) robust_score <- emuFit(formula = ~ Group,                        data = wirbel_sample[ch_study_obs, ],                        fitted_model = ch_fit,                        refit = FALSE,                        test_kj = data.frame(k = covariate_to_test,                                              j = mOTU_to_test),                         Y = small_Y) robust_score$coef$pval[mOTU_to_test] #> [1] 0.301683"},{"path":"https://statdivlab.github.io/radEmu/articles/parallel_radEmu.html","id":"running-robust-score-tests-in-parallel","dir":"Articles","previous_headings":"","what":"Running robust score tests in parallel","title":"Parallelizing computation for score tests with radEmu","text":"Now, let’s run tests parallel. parallelizing code jj argument test_kj. assume one covariate want test, corresponding specific column design matrix kk. However, want run tests multiple columns design matrix, can parallelize pairs kk jj argument testkjtest_kj. Let’s say want run score tests first five mOTUs dataset. First, need check cores computer see reasonable amount cores parallelize . tend use one fewer core number cores available. Next, write function called parallel. function fit model null calculate robust score test statistics. Note output function emuFit object. Now, can run score tests parallel. ’ll just first five. may take minute , depending machine. Now, can see barely took time running single score test, able parallelize cores (laptop, ’m using five cores, can run five tests time). p-value can pulled list follows: help organise information, can make coefficient matrix combines information component list: column containing p-values called pval. Happy testing!","code":"ncores <- parallel::detectCores() - 1 ncores #> [1] 3 emuTest <- function(category) {   score_res <- emuFit(formula = ~ Group,                        data = wirbel_sample[ch_study_obs, ],                        fitted_model = ch_fit,                        refit = FALSE,                        test_kj = data.frame(k = covariate_to_test,                                              j = category),                         Y = small_Y)   return(score_res) } if (.Platform$OS.type != \"windows\") {   # run if we are on a Mac or Linux machine   score_res <- mclapply(1:5,                       emuTest,                       mc.cores = ncores) } else {   # don't run if we are on a Windows machine   score_res <- NULL } if (!is.null(score_res)) {   c(score_res[[1]]$coef$pval[1], ## robust score test p-value for the first taxon   score_res[[2]]$coef$pval[2]) ## robust score test p-value for the second taxon } #> [1] 0.03936520 0.03647308 if (!is.null(score_res)) {   full_score <- sapply(1:length(score_res),                         function(x) score_res[[x]]$coef$score_stat[x])   full_pval <- sapply(1:length(score_res),                        function(x) score_res[[x]]$coef$pval[x])   full_coef <- ch_fit$coef %>%     dplyr::select(-score_stat, -pval) %>%     filter(category_num %in% 1:5) %>%     mutate(score_stat = full_score,            pval = full_pval)   full_coef } #>   covariate                                                category #> 1  GroupCRC Fusobacterium nucleatum s. vincentii [ref_mOTU_v2_0754] #> 2  GroupCRC  Fusobacterium nucleatum s. animalis [ref_mOTU_v2_0776] #> 3  GroupCRC Fusobacterium nucleatum s. nucleatum [ref_mOTU_v2_0777] #> 4  GroupCRC         Faecalibacterium prausnitzii [ref_mOTU_v2_1379] #> 5  GroupCRC                  Eubacterium siraeum [ref_mOTU_v2_1387] #>   category_num    estimate        se      lower     upper  score_stat #> 1            1  1.48637864 0.8966329 -0.2709896 3.2437469 4.245037543 #> 2            2  2.31317105 0.8271200  0.6920456 3.9342966 4.374848023 #> 3            3  3.08640472 1.0275200  1.0725026 5.1003069 3.186822346 #> 4            4 -0.34307573 0.3520406 -1.0330626 0.3469111 0.825349169 #> 5            5  0.03892098 0.4780368 -0.8980140 0.9758559 0.007383068 #>         pval #> 1 0.03936520 #> 2 0.03647308 #> 3 0.07423418 #> 4 0.36362082 #> 5 0.93152621"},{"path":"https://statdivlab.github.io/radEmu/articles/radEmu_clustered_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using radEmu on clustered data","text":"vignette explore use radEmu clustered data. Data cluster dependence common phenomenon microbiome studies. type dependence can come experimental factors shared cages tanks study animals. can also arise repeated measurements longitudinal studies. Sometimes people deal clustered data via random effects. might seen syntax + (1 | cluster). (radEmu developers) don’t want make strong assumptions (random effects normally distributed), handle cluster dependence using GEE framework. like approach ’s robust many forms model misspecification, reason, find superior random effects. dependence accounted , statistical inference radEmu (statistical methods!) assume samples independent. cluster dependence assume independence, ’ll anti-conservative inference (.e., p-values smaller ). Therefore, strongly recommend adjusting cluster dependence arose sample collection! Note cluster dependence won’t change estimates (β̂j\\hat{\\beta}_j’s), (likely) change p-values. Luckily, tools account cluster dependence implemented radEmu! argument implemented radEmu v1.2.0.0 forward, trouble using cluster argument, check reinstalled radEmu recently. TLDR; basic syntax follows. my_clusters vector length nn (number samples), observations cluster value my_clusters (e.g. my_clusters = c(1, 1, 2, 2, 3, 4)). Fun fact! implemented functionality user requests. Therefore, ’s something ’d like see don’t see, let us know ’ll see can !","code":"emuFit(formula = ~ covariate,        data = my_data_frame,         Y = my_microbial_abundances,        cluster = my_clusters)"},{"path":"https://statdivlab.github.io/radEmu/articles/radEmu_clustered_data.html","id":"generating-data-with-cluster-dependence","dir":"Articles","previous_headings":"","what":"Generating data with cluster dependence","title":"Using radEmu on clustered data","text":"start, let’s generate toy example (10 categories, 60 samples) cluster dependence within data. way simulate data isn’t important; ’s just illustration. radEmu can handle taxa samples, just vignette builds quickly. Let’s just pause look elements cluster: observations first cage (person, tank, whatever…) cage1 corresponding cluster_named variable. Let’s fit model data! know log-fold difference abundance category 3 comparing samples differ 1 unit XX 3.5, good power, reject null βX1,3=0\\beta_{X_1, 3} = 0. fit model including cluster dependence follows: can check full object, estimate 4.6 p-value testing parameter equals zero 0.084. shabby, especially considering half observations zero, lot noise data (arising negative binomial simulation scheme). Let’s also compare situation mistakenly ignore clustering. case, expect smaller p-value, saying independent observations. ignore clustering, get estimate log fold difference category 3 across values covariate 4.6 p-value 0.007. can see estimates whether account cluster, p-values different (pretending evidence absence clustering).","code":"J <- 10; n <- 60 # generate design matrix  set.seed(10) X <- cbind(1, rnorm(n)) cov_dat <- data.frame(cov = X[, 2]) # cluster membership  cluster <- rep(1:4, each = n/4) cluster_named <- paste(\"cage\", cluster, sep = \"\") cov_dat$cluster <- cluster # intercepts for each category b0 <- rnorm(J) # coefficients for X1 for each category  b1 <- seq(1, 5, length.out = J) # mean center the coefficients b1 <- b1 - mean(b1) # set the coefficient for the 3rd category to 4 (why not!?) # Note that because of the constraint, we're only able to estimate # b1 - mean(b1), which is ~3.9.   b1[3] <- 4 # generate B coefficient matrix  b <- rbind(b0, b1)  # simulate data according to a zero-inflated negative binomial distribution # the mean model used to simulate this data takes into account the cluster membership Y <- simulate_data(n = n, J = J, b0 = b0, b1 = b1, distn = \"ZINB\", zinb_size = 10,                    zinb_zero_prop = 0.3, mean_count_before_ZI = 100, X = X, cluster = cluster) table(cluster_named) #> cluster_named #> cage1 cage2 cage3 cage4  #>    15    15    15    15 ef_cluster <- emuFit(formula = ~ cov,                      data = cov_dat,                       Y = Y,                      cluster = cluster_named,                       test_kj = data.frame(k = 2, j = 3)) ef_no_cluster <- emuFit(formula = ~ cov,                         data = cov_dat,                          Y = Y,                         test_kj = data.frame(k = 2, j = 3))"},{"path":"https://statdivlab.github.io/radEmu/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Clausen. Author, maintainer. Amy Willis. Author. Sarah Teichman. Author.","code":""},{"path":"https://statdivlab.github.io/radEmu/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Clausen D, Willis , Teichman S (2024). radEmu: Using Relative Abundance Data Estimate Multiplicative Differences Mean Absolute Abundance. R package version 1.2.0.0, https://statdivlab.github.io/radEmu/, https://github.com/statdivlab/radEmu.","code":"@Manual{,   title = {radEmu: Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance},   author = {David Clausen and Amy Willis and Sarah Teichman},   year = {2024},   note = {R package version 1.2.0.0, https://statdivlab.github.io/radEmu/},   url = {https://github.com/statdivlab/radEmu}, }"},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"rademu-","dir":"","previous_headings":"","what":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"radEmu R package estimating changes abundance microbial taxa using amplicon shotgun sequencing technologies. microbial ecologist bioinformatician, things may like radEmu include know sounds magical! can check Section 2 manuscript details. brief, can’t recover absolute abundance taxa individual sample amplicon shotgun sequencing. However, can estimate fold-differences abundances across samples. radEmu robust differential detection taxa, don’t worry (e.g.) different extraction/PCR efficiency protocol radEmu robust unequal sampling effort. need rarefy! (Actually, please don’t.) radEmu deals zeroes natively, without need arbitrary parameters like pseudocounts Instead, radEmu estimates differences abundance across taxa Amongst existing methods, radEmu similar flavor ALDEx2 ANCOM (ANCOM relatives), doesn’t require priors, log-ratio transformations (thus pseudocounts), reference taxon! radEmu can adjust relevant covariates, including precision variables confounders radEmu achieves jointly modeling taxa (.e., ’s taxon--taxon model like corncob). makes harder parallelize, fortunately testing can parallelized easily. (’s example preprint’s supplementary material, let us know want tutorial !) standard desktop, radEmu can handle 1000 taxa, 800 samples 12 covariates. may want get 35-minute coffee break runs, though. radEmu publicly available open-source software… right ! statistician, things may like radEmu include clearly defined interpretable target estimand Fast algorithms estimation alternative null hypotheses Check preprint details! model isn’t built cater zero-inflated Negative Binominally distributed data, still awesome! Note robust score tests better error rate control robust Wald tests (bit slower) Sadly yet logo nice-looking logo. like design us one, please let Amy know!","code":""},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"download radEmu package, use code . currently releasing radEmu via GitHub. ’d like us consider submitting CRAN, please let us know opening issue.","code":"# install.packages(\"devtools\") devtools::install_github(\"statdivlab/radEmu\") library(radEmu)"},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"vignettes demonstrate example usage main functions. Please file issue request tutorial currently included. following code shows easy--use syntax data phyloseq object: abundances covariates dataframe, can use following:","code":"ch_fit <- emuFit(formula = ~ Group + Study + Gender + Sampling,                   Y = my_phyloseq_object) all_fit <- emuFit(formula = ~ Group + Study + Gender + Sampling,                   data = my_covariates_df,                    Y = my_abundances_df)"},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"additionally pkgdown website contains pre-built versions function documentation vignettes (introductory vignette, introductory vignette uses phyloseq data, vignette running radEmu tests parallel efficient computation, vignette running radEmu clustered data).","code":""},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"use radEmu analysis, please cite open-access preprint, available arXiv. David S Clausen Amy D Willis. 2024+. “Estimating Fold Changes Partially Observed Outcomes Applications Microbial Metagenomics.” arxiv.org/abs/2402.05231 Huge thanks NIGMS funding work Amy’s R35!","code":""},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"bug-reports--change-requests","dir":"","previous_headings":"","what":"Bug Reports / Change Requests","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"encounter bug like make change request, please file issue . ’re developer, love review pull requests.","code":""},{"path":"https://statdivlab.github.io/radEmu/index.html","id":"nomenclature","dir":"","previous_headings":"","what":"Nomenclature","title":"Using Relative Abundance Data to Estimate of Multiplicative Differences in Mean Absolute Abundance","text":"developing fast, robust interpretable estimation methods, enjoy making silly names fast, robust interpretable estimation methods. radEmu abbreviates radEmuAbPill, denotes “using relative abundance data estimate multiplicative differences absolute abundances partially identified log-linear models.”","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit radEmu model — emuFit","title":"Fit radEmu model — emuFit","text":"Fit radEmu model","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit radEmu model — emuFit","text":"","code":"emuFit(   Y,   X = NULL,   formula = NULL,   data = NULL,   assay_name = NULL,   cluster = NULL,   penalize = TRUE,   B = NULL,   B_null_list = NULL,   fitted_model = NULL,   refit = TRUE,   test_kj = NULL,   alpha = 0.05,   return_wald_p = FALSE,   compute_cis = TRUE,   run_score_tests = TRUE,   use_fullmodel_info = FALSE,   use_fullmodel_cov = FALSE,   use_both_cov = FALSE,   constraint_fn = pseudohuber_center,   constraint_grad_fn = dpseudohuber_center_dx,   constraint_param = 0.1,   verbose = FALSE,   tolerance = 1e-04,   B_null_tol = 0.001,   rho_init = 1,   inner_tol = 1,   ntries = 4,   tau = 2,   kappa = 0.8,   constraint_tol = 1e-05,   c1 = 1e-04,   maxit = 1000,   inner_maxit = 25,   max_step = 1,   trackB = FALSE,   return_nullB = FALSE,   return_both_score_pvals = FALSE,   remove_zero_comparison_pvals = 0.01,   unobserved_taxon_error = TRUE )"},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit radEmu model — emuFit","text":"Y n x J matrix dataframe nonnegative observations, phyloseq object containing otu table sample data. X n x p matrix dataframe covariates (optional) formula one-sided formula specifying form mean model fit data n x p data frame containing variables given formula assay_name string containing desired assay name within TreeSummarizedExperiment object. required Y TreeSummarizedExperiment object, otherwise argument nothing can ignored. cluster vector giving cluster membership row Y used computing GEE test statistics. Default NULL, case rows Y treated independent. penalize logical: Firth penalty used fitting model? Default TRUE. B starting value coefficient matrix (p x J). provided, B initiated zero matrix. B_null_list list starting values coefficient matrix (p x J) null estimation. either list length test_kj. want provide starting values tests, include elements list NULL. fitted_model fitted model produced separate call emuFit; provided score tests run without refitting full unrestricted model. Default NULL. refit logical: B fitted_model provided, full model fit (TRUE) fitting step skipped (FALSE), e.g., score tests run already fitted model. Default TRUE. test_kj data frame whose rows give coordinates (category j covariate k) elements B construct hypothesis tests . test_kj provided, elements B save intercept row tested. alpha nominal type 1 error level used construct confidence intervals. Default 0.05 (corresponding 95% confidence intervals) return_wald_p logical: return p-values Wald tests? Default FALSE. compute_cis logical: compute return Wald CIs? Default TRUE. run_score_tests logical: perform robust score testing? Default TRUE. use_fullmodel_info logical: TODO? Default FALSE. use_fullmodel_cov logical: use information matrix empirical score covariance computed full model fit? Defaults FALSE, case quantities recomputed null model fit score testing. use_both_cov logical: score tests run using information empirical score covariance evaluated null full models? Used simulations constraint_fn function g defining constraint rows B; g(B_k) = 0 rows k = 1, ..., p B. Default function smoothed median (minimizer pseudohuber loss). number provided single category constraint used provided category reference category. constraint_grad_fn derivative constraint_fn respect arguments (.e., elements row B) constraint_param pseudohuber centering used (default), parameter controlling relative weighting elements closer center. (Limit constraint_param approaches infinity mean; parameter approaches zero, minimizer pseudo-Huber loss approaches median.) verbose provide updates model fitted? Defaults FALSE. tolerance tolerance stopping criterion full model fitting; element B updated value single step, exit optimization. Defaults 1e-3. B_null_tol numeric: convergence tolerance null model fits score testing (max absolute difference B across outer iterations threshold, declare convergence). Default 0.01. rho_init numeric: value initiate rho parameter augmented Lagrangian algorithm. Default 1. inner_tol numeric: convergence tolerance augmented Lagrangian subproblems within null model fitting. Default 1. ntries numeric: many times optimization tried null models least one optimization attempt fails? Default 4. tau numeric: value scale rho iteration augmented Lagrangian algorithm move estimate toward zero sufficiently. Default 2. kappa numeric: value 0 1 determines cutoff ratio current distance feasibility distance last iteration triggering scaling rho. ratio kappa, rho scaled tau encourage estimate move toward feasibility. constraint_tol numeric: constraint tolerance fits null hypotheses (tested element B must equal constraint function within tolerance fit accepted solution constrained optimization problem). Default 1e-5. c1 numeric: parameter Armijo line search. Default 1e-4. maxit maximum number outer iterations augmented lagrangian algorithm perform exiting optimization. Default 1000. inner_maxit maximum number coordinate descent passes columns B make within outer iteration augmented lagrangian algorithm exiting inner loop max_step maximum stepsize; update directions computed optimization rescaled step parameter exceeds value. Defaults 0.5. trackB logical: values B recorded across optimization iterations returned? Primarily used debugging. Default FALSE. return_nullB logical: values B null hypothesis returned. Primarily used debugging. Default FALSE. return_both_score_pvals logical: score p-values returned using information matrix computed full model fit null model fits? Default FALSE. parameter used simulations - applied analysis, type p-value used chosen conducting tests. remove_zero_comparison_pvals score p-values replaced NA zero-comparison parameters? parameters occur categorical covariates three levels, represent parameters compare covariate level reference level category comparison level reference level 0 counts samples. parameters can misleadingly small p-values thought scientifically interesting signals. recommend removing analyzing data . TRUE, zero-comparison parameter p-values set NA. FALSE zero-comparison parameter p-values set NA. value 0 1, zero-comparison p-values value set NA. Default 0.01. unobserved_taxon_error logical: error thrown Y includes taxa 0 counts samples? Default TRUE.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit radEmu model — emuFit","text":"list containing elements 'coef', 'B', 'penalized', 'Y_augmented', 'z_hat', '', 'Dy', 'score_test_hyperparams' score tests run. Parameter estimates covariate outcome category (e.g., taxon microbiome data), well optionally confidence intervals p-values, contained 'coef'. robust score statistics score test p-values also included 'coef'. zero-comparison parameters model, column 'zero_comparison' also included, TRUE parameters compare level categorical covariate reference level category zero counts comparison level reference level. check currently implemented arbitrary design matrix generated using formula data arguments, design matrix one categorical covariate design matrix X input directly. 'B' contains parameter estimates matrix format (rows indexing covariates columns indexing outcome category / taxon). 'penalized' equal TRUE f Firth penalty used estimation (default) FALSE otherwise. 'z_hat' returns nuisance parameters calculated Equation 7 radEmu manuscript, corresponding either 'Y_augmented' 'Y' 'penalized' equal TRUE FALSE, respectively. ' 'Dy' contain information matrix empirical score covariance matrix computed full model. 'score_test_hyperparams' contains parameters hyperparameters related estimation null, including whether algorithm converged, can helpful debugging.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit radEmu model. Called by emuFit — emuFit_micro","title":"Fit radEmu model. Called by emuFit — emuFit_micro","text":"Fit radEmu model. Called emuFit","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit radEmu model. Called by emuFit — emuFit_micro","text":"","code":"emuFit_micro(   X,   Y,   B = NULL,   constraint_fn = NULL,   maxit = 250,   tolerance = 1e-05,   verbose = TRUE,   warm_start = TRUE,   c1 = 1e-04,   max_stepsize = 0.5,   max_abs_B = 50,   use_working_constraint = TRUE,   j_ref = NULL )"},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit radEmu model. Called by emuFit — emuFit_micro","text":"X p x J design matrix Y n x p matrix nonnegative observations B starting value coefficient matrix (p x J) constraint_fn function g defining constraint rows B; g(B_k) = 0 rows k = 1, ..., p B. maxit maximum number coordinate descent cycles perform exiting optimization tolerance tolerance improvement log likelihood exit optimization verbose logical: print information optimization progress? Default TRUE. warm_start logical: begin \"warm start\" obtained linear regression transformed counts? Default TRUE. c1 numeric: value constant Armijo condition checked backtracking line search max_stepsize numeric: maximum sup-norm value proposed step. Default 0.5. max_abs_B numeric: maximum value elements B allowed take absolute value. Helps prevent optimization failure larger problems. Defaults 50. use_working_constraint logical: set column B equal zero within optimization. Default TRUE. j_ref use_working_constraint TRUE, column index column B set zero. Default NULL, case column chosen maximize number nonzero entries Y_j_ref.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit radEmu model. Called by emuFit — emuFit_micro","text":"p x J matrix containing regression coefficients (constraint g(B_k) = 0)","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro_penalized.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit radEmu model with Firth penalty — emuFit_micro_penalized","title":"Fit radEmu model with Firth penalty — emuFit_micro_penalized","text":"Fit radEmu model Firth penalty","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro_penalized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit radEmu model with Firth penalty — emuFit_micro_penalized","text":"","code":"emuFit_micro_penalized(   X,   Y,   B = NULL,   X_cup = NULL,   constraint_fn = NULL,   maxit = 500,   ml_maxit = 5,   tolerance = 0.001,   max_step = 5,   verbose = TRUE,   max_abs_B = 250,   use_legacy_augmentation = FALSE,   j_ref = NULL )"},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro_penalized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit radEmu model with Firth penalty — emuFit_micro_penalized","text":"X p x J design matrix Y n x p matrix nonnegative observations B starting value coefficient matrix (p x J) X_cup design matrix Y long format. Defaults NULL, case matrix computed X. constraint_fn function g defining constraint rows B; g(B_k) = 0 rows k = 1, ..., p B. maxit maximum number coordinate descent cycles perform exiting optimization ml_maxit numeric: maximum number coordinate descent cycles perform inside maximum likelihood fits. Defaults 5. tolerance tolerance improvement log likelihood exit optimization max_step numeric: maximum sup-norm proposed update steps verbose logical: report information progress optimization? Default TRUE. max_abs_B numeric: maximum allowed value elements B (absolute value). cases needed Firth penalty prevent infinite estimates separation. However, threshold may helpful poorly conditioned problems (e.g., many nearly collinear regressors). Default 50. use_legacy_augmentation logical: older (slower) implementation data augmentation used? used testing - advantage using older implementation applied settings. j_ref column B set zero convenience identifiability optimization. Default NULL, case column chosen based characteristics Y (.e., j_ref chosen maximize number entries Y_j_ref greater zero).","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/emuFit_micro_penalized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit radEmu model with Firth penalty — emuFit_micro_penalized","text":"p x J matrix containing regression coefficients (constraint g(B_k) = 0)","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/fit_null.html","id":null,"dir":"Reference","previous_headings":"","what":"fits model with B_kj constrained to equal g(B_k) for constraint fn g — fit_null","title":"fits model with B_kj constrained to equal g(B_k) for constraint fn g — fit_null","text":"fits model B_kj constrained equal g(B_k) constraint fn g","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/fit_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fits model with B_kj constrained to equal g(B_k) for constraint fn g — fit_null","text":"","code":"fit_null(   B,   Y,   X,   X_cup = NULL,   k_constr,   j_constr,   j_ref,   constraint_fn,   constraint_grad_fn,   rho_init = 1,   tau = 1.2,   kappa = 0.8,   B_tol = 0.01,   inner_tol = 0.01,   constraint_tol = 1e-04,   max_step = 5,   c1 = 1e-04,   maxit = 1000,   inner_maxit = 25,   verbose = FALSE,   trackB = FALSE )"},{"path":"https://statdivlab.github.io/radEmu/reference/fit_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fits model with B_kj constrained to equal g(B_k) for constraint fn g — fit_null","text":"B description Y Y (augmentations) X design matrix X_cup design matrix Y long format. Defaults NULL, case matrix computed X. k_constr row index B constrain j_constr col index B constrain j_ref column index convenience constraint constraint_fn constraint function constraint_grad_fn gradient constraint fn rho_init start quadratic penalty parameter tau much increment rho iteration kappa cutoff increment rho. distance feasibility shrink least factor iteration, increment rho tau. B_tol tolerance convergence max_k,j |B^t_kj - B^(t - 1)_kj| inner_tol tolerance inner loop constraint_tol tolerance |B_kj - g(B_k)| max_step maximum step size c1 constant armijo rule maxit maximum iterations inner_maxit max iterations per inner loop verbose shout ? trackB track value beta across iterations return?","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/fit_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fits model with B_kj constrained to equal g(B_k) for constraint fn g — fit_null","text":"list containing elements 'B', 'k_constr', 'j_constr', 'niter' 'gap', 'u', 'rho', 'Bs'. 'B' matrix containing parameter estimates null (obtained maximum likelihood augmented observations Y), 'k_constr', 'j_constr' give row column indexes parameter fixed equal constraint function g() null. 'niter' scalar giving total number outer iterations used fit null model, 'gap' gives final value g(B_k_constr) - B_k_constr j_constr, 'u' 'rho' final values augmented Lagrangian parameters, 'Bs' data frame containing values B iteration trackB set equal TRUE (otherwise contains NULL value).","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/plot.emuFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function — plot.emuFit","title":"Plotting function — plot.emuFit","text":"Plotting function","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/plot.emuFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function — plot.emuFit","text":"","code":"# S3 method for class 'emuFit' plot(   x,   plot_key = NULL,   title = NULL,   taxon_names = NULL,   display_taxon_names = TRUE,   data_only = FALSE,   ... )"},{"path":"https://statdivlab.github.io/radEmu/reference/plot.emuFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function — plot.emuFit","text":"x Output emuFit() plot_key (Optional) Default NULL. List named vectors containing names \"covariate\" column coef output radEmu model object. wish multiple covariate values plotted plot, variables included named vector. default, column design matrix receives plot. title (Optional). Default NULL. Character string. main title graphic. taxon_names (Optional). Default NULL. Data frame. NULL, keep taxon names listed radEmu model. Otherwise, users can input data frame two columns: one labelled \"category\" levels radEmu output another labelled \"cat_small\" preferred labels. display_taxon_names (Optional). Default TRUE. Boolean. FALSE, remove sample names plot. data_only (Optional). Default FALSE. Boolean. TRUE, returns data frame. ... optional parameters time.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/plot.emuFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function — plot.emuFit","text":"Object class ggplot. Plot radEmu model fit 95% confidence intervals.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/plot.emuFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function — plot.emuFit","text":"","code":"data(wirbel_sample) data(wirbel_otu)  subset_studies <- which(wirbel_sample$Study %in% c(\"FR-CRC\", \"US-CRC\", \"AT-CRC\"))  chosen_genera <- c(\"Eubacterium\", \"Faecalibacterium\", \"Fusobacterium\", \"Porphyromonas\")  mOTU_names <- colnames(wirbel_otu) mOTU_name_df <- data.frame(name = mOTU_names) %>%    dplyr::mutate(base_name = stringr::str_remove(mOTU_names, \"unknown \") %>%   stringr::str_remove(\"uncultured \")) %>%   dplyr::mutate(genus_name = stringr::word(base_name, 1))  restricted_mOTU_names <- mOTU_name_df %>%   dplyr::filter(genus_name %in% chosen_genera) %>%   dplyr::pull(name)  small_Y <- wirbel_otu[subset_studies, restricted_mOTU_names] category_to_rm <- which(colSums(small_Y) == 0)  small_sample <- wirbel_sample[subset_studies, ]  ch_fit <- emuFit(formula = ~ Group + Study,                   data = small_sample,                  Y = small_Y,                  run_score_tests = FALSE)  plot_key <- list(p1 = c(\"Control\" = \"GroupCTR\"),                  p2 = c(\"FR-Control\" = \"StudyFR-CRC\",                         \"US-Control\" = \"StudyUS-CRC\"))  out <- plot(x = ch_fit,             plot_key = plot_key,             display_taxon_names = FALSE)  out$plots$p1  out$plots$p2"},{"path":"https://statdivlab.github.io/radEmu/reference/power_model.html","id":null,"dir":"Reference","previous_headings":"","what":"A fitted GLM model for the power of radEmu to reject a truly false null hypothesis — power_model","title":"A fitted GLM model for the power of radEmu to reject a truly false null hypothesis — power_model","text":"100 simulations drawn n = 10, 30, 50 100 total samples; J = 250 500 taxa; single categorical covariate (p = 2); effect sizes beta11 (parameter interest) 0, 0.5, 1, ... 2.5. beta0's range -3 3, beta1's range -1 1 correlation beta0s (, roughly speaking, control relative abundance taxa) beta1s (control difference abundance two covariate groups). Counts drawn zero-inflated negative binomial model size parameter 5, zero-inflation probability 0.5 average z's around log(50). model probability rejecting null hypothesis beta11 = 0 fit. Model fitting guided plotting log odds rejection, effect modification n beta11 observed. model may useful power calculations future, though simulation, generalizability limited similar data generating processes. Simulation code can generalized available https://github.com/statdivlab/radEmu_supplementary fig-power/power_simulations.R","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/power_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A fitted GLM model for the power of radEmu to reject a truly false null hypothesis — power_model","text":"","code":"power_model"},{"path":"https://statdivlab.github.io/radEmu/reference/power_model.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A fitted GLM model for the power of radEmu to reject a truly false null hypothesis — power_model","text":"GLM object. power_model GLM object modelling odds rejecting null hypothesis given sample size, number taxa, effect size","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/power_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A fitted GLM model for the power of radEmu to reject a truly false null hypothesis — power_model","text":"Wirbel, J et al. (2023). Meta-analysis fecal metagenomes reveals global microbial signatures specific colorectal cancer. Nature Medicine, 25, 679–689. <doi: 10.1038/s41591-019-0406-6>.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/print.emuFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function — print.emuFit","title":"Print function — print.emuFit","text":"Print function","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/print.emuFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function — print.emuFit","text":"","code":"# S3 method for class 'emuFit' print(x, n = 20, ...)"},{"path":"https://statdivlab.github.io/radEmu/reference/print.emuFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function — print.emuFit","text":"x Object class emuFit n number coefficient estimates printed (ordered largest absolute value smallest) ... optional arguments accepted time.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/print.emuFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function — print.emuFit","text":"NULL. Displays printed model summary.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/score_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Run robust score test — score_test","title":"Run robust score test — score_test","text":"Run robust score test","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/score_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run robust score test — score_test","text":"","code":"score_test(   B,   Y,   X,   X_cup,   k_constr,   j_constr,   constraint_fn,   constraint_grad_fn,   rho_init = 1,   tau = 2,   kappa = 0.8,   B_tol = 0.001,   inner_tol = 0.01,   constraint_tol = 0.001,   j_ref,   c1 = 1e-04,   maxit = 1000,   inner_maxit = 25,   ntries = 4,   verbose = FALSE,   trackB = FALSE,   I_inv = NULL,   Dy = NULL,   return_both_score_pvals = FALSE,   cluster = NULL )"},{"path":"https://statdivlab.github.io/radEmu/reference/score_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run robust score test — score_test","text":"B value coefficient matrix (p x J) returned full model fit value coefficient matrix start null estimation given input emuFit Y n x J matrix dataframe augmented nonnegative observations (.e., observations Y plus augmentations last iteration maximum penalized likelihood estimation full model) X n x p matrix covariates X_cup design matrix long format Y long format B (nJ x pJ) k_constr row index element B tested equality row identifiability constraint j_constr column index element B tested equality row identifiability constraint constraint_fn function g defining constraint rows B; g(B_k) = 0 rows k = 1, ..., p B. Default function smoothed median (minimizer pseudohuber loss). constraint_grad_fn function returning gradient constraint function (function row B) rho_init numeric: value initiate rho parameter augmented Lagrangian algorithm. Default 1. tau numeric: value scale rho iteration augmented Lagrangian algorithm move estimate toward zero sufficiently. Default 2. kappa numeric: value 0 1 determines cutoff ratio current distance feasibility distance last iteration triggering scaling rho. ratio kappa, rho scaled tau encourage estimate move toward feasibility. B_tol numeric: convergence tolerance null model fits score testing (max absolute difference B across outer iterations threshold, declare convergence). Default 0.001. inner_tol numeric: convergence tolerance inner loop null fitting algorithm (max absolute difference B across inner iterations threshold, declare convergence). Default 0.01. constraint_tol numeric: constraint tolerance fits null hypotheses (tested element B must equal constraint function within tolerance fit accepted solution constrained optimization problem). Default 1e-5. j_ref column index convenience constraint c1 numeric: parameter Armijo line search. Default 1e-4. maxit maximum number outer iterations augmented lagrangian algorithm perform exiting optimization. Default 1000. inner_maxit maximum number coordinate descent passes columns B make within outer iteration augmented lagrangian algorithm exiting inner loop ntries numeric: total number times attempt optimization null optimization fails (optimization parameters tweaked subsequent fits attempt avoid failure). Default 4. verbose provide updates model fitted? Defaults TRUE. trackB store return values B iteration optimization algorithm? Useful debugging. Default FALSE. I_inv Optional: matrix containing inverted information matrix computed full model. Default NULL, case information recomputed null, recommend. Dy Optional: matrix containing empirical score covariance computed full model. Default NULL, case quantity recomputed null, recommend. return_both_score_pvals logical: score p-values returned using information matrix computed full model fit null model fits? Default FALSE. parameter used simulations - applied analysis, type p-value used chosen conducting tests. cluster numeric vector giving cluster membership row Y used computing GEE test statistics. Default NULL, case rows Y treated independent.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/score_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run robust score test — score_test","text":"list containing elements 'score_stat', 'pval', 'log_pval','niter', 'convergence', 'gap', 'u', 'rho', 'tau', 'inner_maxit', 'null_B', 'Bs'. 'score_stat' gives value robust score statistic H_0: B_k_constr,j_constr = g(B_k_constr). 'pval' 'log_pval' p-value (natural log scales) corresponding score statistic (log_pval may useful p-value close zero). 'gap' final value g(B_k_constr) - B_k_constr, j_constr obtained optimization null. 'u' 'rho' final values augmented Lagrangian parameters returned null fitting algorithm. 'tau' final value 'tau' used update 'rho' values 'inner_maxit' final maximum number iterations inner optimization loop optimization null, B z parameter values maximized specific 'u' 'rho' parameters. 'null_B' value B returned null fitting algorithm. 'Bs' default NULL; trackB = TRUE, 'Bs data frame containing values B outcome category, covariate, iteration.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data simulation function — simulate_data","title":"Data simulation function — simulate_data","text":"Function simulate data simulations Clausen & Willis (2024) cluster vignette","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data simulation function — simulate_data","text":"","code":"simulate_data(   n,   J,   b0 = NULL,   b1 = NULL,   distn,   zinb_size = NULL,   zinb_zero_prop = NULL,   mean_count_before_ZI,   X = NULL,   B = NULL,   cluster = NULL )"},{"path":"https://statdivlab.github.io/radEmu/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data simulation function — simulate_data","text":"n Number samples J Number categories b0 Intercept parameter vector b1 Covariate paramter vector distn Distribution simulate , either \"Poisson\" \"ZINB\" zinb_size Size parameter negative binomial draw ZINB data zinb_zero_prop Proportion zeros ZINB data mean_count_before_ZI Parameter construction z_i mean model. Setting 50 works well practice. X Optional design matrix, must two columns n rows. B Optional B matrix, p equal 2 cluster Optional cluster vector, must n elements.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data simulation function — simulate_data","text":"Y. n times J dimension matrix simulated response counts.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_otu.html","id":null,"dir":"Reference","previous_headings":"","what":"mOTU table from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_otu","title":"mOTU table from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_otu","text":"matrix counts mOTUs (metagenome-derived OTUs) sample.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_otu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mOTU table from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_otu","text":"","code":"wirbel_otu"},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_otu.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mOTU table from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_otu","text":"matrix mOTU counts. otu_table OTU table 566 samples 845 taxa","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_otu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"mOTU table from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_otu","text":"Wirbel, J et al. (2019). Meta-analysis fecal metagenomes reveals global microbial signatures specific colorectal cancer. Nature Medicine, 25, 679–689. <doi: 10.1038/s41591-019-0406-6>.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariates from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_sample","title":"Covariates from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_sample","text":"data frame covariates.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariates from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_sample","text":"","code":"wirbel_sample"},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Covariates from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_sample","text":"data frame object sample data, 566 observations 14 covariates. Sample_ID id specific sample External_ID id specific sample original study Age age subject sample taken Gender gender subject sample taken BMI BMI subject sample taken Country country study Study study sample Group CRC colorectal cancer CTR control Library_Size library size sample Age_spline.1 value first coordinate age spline Age_spline.2 value second coordinate age spline BMI_spline.1 value first coordinate BMI spline BMI_spline.2 value second coordinate age spline Sampling whether sampling happened colonoscopy","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_sample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Covariates from Wirbel et al. meta-analysis of fecal metagenomes. — wirbel_sample","text":"Wirbel, J et al. (2019). Meta-analysis fecal metagenomes reveals global microbial signatures specific colorectal cancer. Nature Medicine, 25, 679–689. <doi: 10.1038/s41591-019-0406-6>.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy information for mOTUs from Wirbel et al. meta analysis. — wirbel_taxonomy","title":"Taxonomy information for mOTUs from Wirbel et al. meta analysis. — wirbel_taxonomy","text":"matrix taxonomy information.","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy information for mOTUs from Wirbel et al. meta analysis. — wirbel_taxonomy","text":"","code":"wirbel_taxonomy"},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_taxonomy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Taxonomy information for mOTUs from Wirbel et al. meta analysis. — wirbel_taxonomy","text":"matrix taxonomy information. tax_table taxonomy table","code":""},{"path":"https://statdivlab.github.io/radEmu/reference/wirbel_taxonomy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Taxonomy information for mOTUs from Wirbel et al. meta analysis. — wirbel_taxonomy","text":"Wirbel, J et al. (2019). Meta-analysis fecal metagenomes reveals global microbial signatures specific colorectal cancer. Nature Medicine, 25, 679–689. <doi: 10.1038/s41591-019-0406-6>.","code":""}]
